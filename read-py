import lightgbm as lgb
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
import numpy as np

# Load your dataset
data = pd.read_csv("train.csv")

# Target variable
y = data['SalePrice']

# Drop target and ID columns from features
X = data.drop(columns=['SalePrice', 'Id'], errors='ignore')

# Handle missing values
X.fillna(-1, inplace=True)

# Convert categorical variables to category type
categorical_features = X.select_dtypes(include=['object']).columns
for col in categorical_features:
    X[col] = X[col].astype('category')

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=None)

print(X_train.dtypes)
categorical_features = list(X.select_dtypes(include=['category']).columns)

print(X_train.select_dtypes(include='category').columns)

# Create LightGBM datasets
train_data = lgb.Dataset(X_train, label=y_train, categorical_feature=categorical_features)
test_data = lgb.Dataset(X_test, label=y_test, categorical_feature=categorical_features, reference=train_data)

# Define LightGBM parameters
params = {
    'boosting_type': 'gbdt',
    'objective': 'regression',
    'metric': 'rmse',
    'num_leaves': 31,
    'learning_rate': 0.05,
    'feature_fraction': 0.8,
}



# Train the model
num_round = 50
model = lgb.train(params, train_data, num_boost_round=num_round, valid_sets=[test_data])

# Predict on the test set
y_pred = model.predict(X_test, num_iteration=model.best_iteration)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
print(f"Root Mean Squared Error (RMSE): {rmse}")

# Feature importance plot
lgb.plot_importance(model, max_num_features=10, importance_type='gain')
plt.title("Top 10 Feature Importances")
plt.show()